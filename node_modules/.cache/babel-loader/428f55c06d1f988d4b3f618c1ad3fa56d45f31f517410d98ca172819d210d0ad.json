{"ast":null,"code":"import Header from \"./components/Header\";\nimport AddTeacherForm from \"./components/AddTeacherForm\";\nimport TeachersContainer from \"./components/TeachersContainer\";\nimport EditTeacherForm from \"./components/EditTeacherForm\";\nexport default {\n  name: 'App',\n  components: {\n    Header,\n    AddTeacherForm,\n    TeachersContainer,\n    EditTeacherForm\n  },\n  data() {\n    return {\n      teachers: [],\n      showCreateTeacher: false,\n      showEditTeacherForm: false,\n      showTeachersContainer: true,\n      editingTeacher: null\n    };\n  },\n  async created() {\n    this.teachers = await this.fetchTeachers();\n  },\n  methods: {\n    // fetch dei dati nel file db.json dell'array teachers\n    async fetchTeachers() {\n      const res = await fetch(\"http://localhost:5000/teachers\");\n      const data = await res.json();\n      return data;\n    },\n    async fetchTeacher(id) {\n      const res = await fetch(`http://localhost:5000/teachers/${id}`);\n      const data = await res.json();\n      return data;\n    },\n    async deleteTeacher(id) {\n      // console.log('task', id);\n      if (confirm('Are you sure?')) {\n        const res = await fetch(`http://localhost:5000/teachers/${id}`, {\n          method: \"DELETE\"\n        });\n        res.status === 200 ? this.teachers = this.teachers.filter(teacher => teacher.id !== id) : alert(\"Error deleting teacher\");\n      }\n    },\n    async isEmailExists(email) {\n      // Effettua una chiamata API per verificare se esiste già un insegnante con la stessa email\n      const res = await fetch(`http://localhost:5000/teachers?email=${email}`);\n      const data = await res.json();\n      return data.length > 0; // Restituisce true se esiste già un insegnante con la stessa email, altrimenti false\n    },\n\n    async isPhoneExists(phonenumber) {\n      // Effettua una chiamata API per verificare se esiste già un insegnante con lo stesso numero di telefono\n      const res = await fetch(`http://localhost:5000/teachers?phonenumber=${phonenumber}`);\n      const data = await res.json();\n      return data.length > 0; // Restituisce true se esiste già un insegnante con lo stesso numero di telefono, altrimenti false\n    },\n\n    async EditTeacherForm(id, newTeacher) {\n      const teacherToEdit = await this.fetchTeacher(id);\n\n      // Crea una copia temporanea dei dati dell'insegnante prima dell'editing\n      const originalTeacher = {\n        ...teacherToEdit\n      };\n\n      // Verifica se esiste già un insegnante con la stessa email\n      const isEmailExisting = await this.isEmailExists(newTeacher.email);\n      if (isEmailExisting && newTeacher.email !== originalTeacher.email) {\n        alert('Esiste già un insegnante con la stessa email.');\n        return;\n      }\n\n      // Verifica se esiste già un insegnante con lo stesso numero di telefono\n      const isPhoneExisting = await this.isPhoneExists(newTeacher.phonenumber);\n      if (isPhoneExisting && newTeacher.phonenumber !== originalTeacher.phonenumber) {\n        alert('Esiste già un insegnante con lo stesso numero di telefono.');\n        return;\n      }\n      const upTeacher = {\n        id: originalTeacher.id,\n        ...newTeacher\n      };\n      const res = await fetch(`http://localhost:5000/teachers/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(upTeacher)\n      });\n      const data = await res.json();\n\n      // Aggiorna la lista degli insegnanti con il nuovo dato ricevuto dal server\n      this.teachers = this.teachers.map(teacher => teacher.id === id ? {\n        ...teacher,\n        ...data\n      } : teacher);\n      this.showEditTeacherForm = !this.showEditTeacherForm;\n    },\n    async createTeacher(teacher) {\n      // Verifica se esiste già un insegnante con la stessa email\n      const isEmailExisting = await this.isEmailExists(teacher.email);\n      if (isEmailExisting) {\n        alert('Esiste già un insegnante con la stessa email.');\n        return;\n      }\n\n      // Verifica se esiste già un insegnante con lo stesso numero di telefono\n      const isPhoneExisting = await this.isPhoneExists(teacher.phonenumber);\n      if (isPhoneExisting) {\n        alert('Esiste già un insegnante con lo stesso numero di telefono.');\n        return;\n      }\n      const res = await fetch(\"http://localhost:5000/teachers\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(teacher)\n      });\n      const data = await res.json();\n      this.teachers = [...this.teachers, data];\n      this.showForm = !this.showForm;\n      this.showCreateTeacher = !this.showCreateTeacher;\n    },\n    // toggle del form create teacher\n    toggleCreateTeacher() {\n      this.showCreateTeacher = !this.showCreateTeacher;\n    },\n    toggleEditTeacherForm(teacher) {\n      this.editingTeacher = teacher;\n      this.showEditTeacherForm = !this.showEditTeacherForm;\n    },\n    toggleTeachersContainer() {\n      console.log(this.showTeachersContainer);\n      if (!this.showTeachersContainer) {\n        this.showTeachersContainer = !this.showTeachersContainer;\n      }\n    }\n  }\n};","map":{"version":3,"names":["Header","AddTeacherForm","TeachersContainer","EditTeacherForm","name","components","data","teachers","showCreateTeacher","showEditTeacherForm","showTeachersContainer","editingTeacher","created","fetchTeachers","methods","res","fetch","json","fetchTeacher","id","deleteTeacher","confirm","method","status","filter","teacher","alert","isEmailExists","email","length","isPhoneExists","phonenumber","newTeacher","teacherToEdit","originalTeacher","isEmailExisting","isPhoneExisting","upTeacher","headers","body","JSON","stringify","map","createTeacher","showForm","toggleCreateTeacher","toggleEditTeacherForm","toggleTeachersContainer","console","log"],"sources":["C:\\Users\\SimonePiscozzo\\vue-exercise\\src\\App.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <Header @toggle-teachers-container=\"toggleTeachersContainer\" />\n    <div class=\"content-container\">\n      <TeachersContainer v-show=\"showTeachersContainer\" @toggle-create-teacher=\"toggleCreateTeacher\" @edit-teacher=\"EditTeacherForm\" @delete-teacher=\"deleteTeacher\" :teachers=\"teachers\" @toggle-edit-teacher=\"toggleEditTeacherForm\" />\n      <div class=\"form-container\" v-show=\"showCreateTeacher\">\n        <AddTeacherForm @create-teacher=\"createTeacher\" @toggle-create-teacher=\"toggleCreateTeacher\"/>\n      </div>\n      <div class=\"form-container\" v-show=\"showEditTeacherForm\">\n        <EditTeacherForm @edit-teacher=\"EditTeacherForm\" @toggle-edit-teacher=\"toggleEditTeacherForm\" :teacher=\"editingTeacher\" />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n  import Header from \"./components/Header\"\n  import AddTeacherForm from \"./components/AddTeacherForm\"\n  import TeachersContainer from \"./components/TeachersContainer\"\n  import EditTeacherForm from \"./components/EditTeacherForm\"\n\n  export default {\n    name: 'App',\n    components: {\n      Header,\n      AddTeacherForm,\n      TeachersContainer,\n      EditTeacherForm,\n    },\n    data() {\n      return {\n        teachers: [],\n        showCreateTeacher: false,\n        showEditTeacherForm: false,\n        showTeachersContainer: true,\n        editingTeacher: null\n      }\n    },\n    async created() {\n      this.teachers = await this.fetchTeachers();\n    },\n    methods: {\n      // fetch dei dati nel file db.json dell'array teachers\n      async fetchTeachers() {\n        const res = await fetch(\"http://localhost:5000/teachers\")\n\n        const data = await res.json()\n\n        return data;\n      },\n      async fetchTeacher(id) {\n        const res = await fetch(`http://localhost:5000/teachers/${id}`)\n\n        const data = await res.json()\n\n        return data\n      },\n      async deleteTeacher(id) {\n        // console.log('task', id);\n        if(confirm('Are you sure?')) {\n                \n          const res = await fetch(`http://localhost:5000/teachers/${id}`, {\n            method: \"DELETE\",\n          })\n\n          res.status === 200 ? (this.teachers = this.teachers.filter((teacher) => teacher.id !== id)) : alert(\"Error deleting teacher\")\n        }\n      },\n\n      async isEmailExists(email) {\n        // Effettua una chiamata API per verificare se esiste già un insegnante con la stessa email\n        const res = await fetch(`http://localhost:5000/teachers?email=${email}`);\n        const data = await res.json();\n\n        return data.length > 0; // Restituisce true se esiste già un insegnante con la stessa email, altrimenti false\n      },\n\n      async isPhoneExists(phonenumber) {\n        // Effettua una chiamata API per verificare se esiste già un insegnante con lo stesso numero di telefono\n        const res = await fetch(`http://localhost:5000/teachers?phonenumber=${phonenumber}`);\n        const data = await res.json();\n\n        return data.length > 0; // Restituisce true se esiste già un insegnante con lo stesso numero di telefono, altrimenti false\n      },\n\n      async EditTeacherForm(id, newTeacher) {\n        const teacherToEdit = await this.fetchTeacher(id);\n\n        // Crea una copia temporanea dei dati dell'insegnante prima dell'editing\n        const originalTeacher = { ...teacherToEdit };\n\n        // Verifica se esiste già un insegnante con la stessa email\n        const isEmailExisting = await this.isEmailExists(newTeacher.email);\n        if (isEmailExisting && newTeacher.email !== originalTeacher.email) {\n          alert('Esiste già un insegnante con la stessa email.');\n          return;\n        }\n\n        // Verifica se esiste già un insegnante con lo stesso numero di telefono\n        const isPhoneExisting = await this.isPhoneExists(newTeacher.phonenumber);\n        if (isPhoneExisting && newTeacher.phonenumber !== originalTeacher.phonenumber) {\n          alert('Esiste già un insegnante con lo stesso numero di telefono.');\n          return;\n        }\n\n        const upTeacher = {\n          id: originalTeacher.id,\n          ...newTeacher,\n        };\n\n        const res = await fetch(`http://localhost:5000/teachers/${id}`, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(upTeacher),\n        });\n\n        const data = await res.json();\n\n        // Aggiorna la lista degli insegnanti con il nuovo dato ricevuto dal server\n        this.teachers = this.teachers.map((teacher) =>\n          teacher.id === id ? { ...teacher, ...data } : teacher\n        );\n\n        this.showEditTeacherForm = !this.showEditTeacherForm;\n      },\n\n      async createTeacher(teacher) {\n        // Verifica se esiste già un insegnante con la stessa email\n        const isEmailExisting = await this.isEmailExists(teacher.email);\n        if (isEmailExisting) {\n          alert('Esiste già un insegnante con la stessa email.');\n          return;\n        }\n\n        // Verifica se esiste già un insegnante con lo stesso numero di telefono\n        const isPhoneExisting = await this.isPhoneExists(teacher.phonenumber);\n        if (isPhoneExisting) {\n          alert('Esiste già un insegnante con lo stesso numero di telefono.');\n          return;\n        }\n\n        const res = await fetch(\"http://localhost:5000/teachers\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(teacher),\n        });\n\n        const data = await res.json();\n\n        this.teachers = [...this.teachers, data];\n        this.showForm = !this.showForm;\n        this.showCreateTeacher = !this.showCreateTeacher;\n      },\n      \n      // toggle del form create teacher\n      toggleCreateTeacher() {\n        this.showCreateTeacher = !this.showCreateTeacher\n      },\n\n      toggleEditTeacherForm(teacher) {\n        this.editingTeacher = teacher;\n        this.showEditTeacherForm = !this.showEditTeacherForm\n      },\n\n      toggleTeachersContainer() {\n        console.log(this.showTeachersContainer);\n        if(!this.showTeachersContainer){\n          this.showTeachersContainer = !this.showTeachersContainer\n        }\n      },\n\n    }\n  }\n</script>\n<style>\n  @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400&display=swap');\n    \n  * {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n    /* outline: 1px orange solid */\n  }\n\n  body {\n    font-family: 'Poppins', sans-serif;\n  }\n\n  .container {\n    width: 100%;\n    height: 100vh;\n    display: flex;\n    flex-direction: column;\n  }\n\n  .content-container {\n    width: 100%;\n    height: auto;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .form-container {\n    position: absolute;\n    width: 100%;\n    height: 100vh;\n    top:0;\n    display: flex;\n    flex-direction: column;\n    row-gap: 50px;\n    justify-content: center;\n    align-items: center;\n    background-color: rgba(0,0,0,0.3);\n    backdrop-filter: blur(2px);\n  }\n\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}