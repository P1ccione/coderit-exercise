{"ast":null,"code":"import AddCourseForm from \"../components/AddCourseForm\";\nimport CoursesContainer from \"../components/CoursesContainer\";\nimport EditCourseForm from \"../components/EditCourseForm\";\nexport default {\n  name: \"CoursesView\",\n  components: {\n    AddCourseForm,\n    CoursesContainer,\n    EditCourseForm\n  },\n  data() {\n    return {\n      courses: [],\n      showCreateCourse: false,\n      showEditCourseForm: false,\n      editingCourse: null\n    };\n  },\n  async created() {\n    this.courses = await this.fetchCourses();\n  },\n  methods: {\n    // fetch dei dati nel file db.json dell'array teachers\n    async fetchCourses() {\n      const res = await fetch(\"http://localhost:5000/courses\");\n      const data = await res.json();\n      return data;\n    },\n    async fetchCourse(id) {\n      const res = await fetch(`http://localhost:5000/courses/${id}`);\n      const data = await res.json();\n      return data;\n    },\n    async deleteCourse(id) {\n      // console.log('task', id);\n      if (confirm('Are you sure?')) {\n        const res = await fetch(`http://localhost:5000/courses/${id}`, {\n          method: \"DELETE\"\n        });\n        res.status === 200 ? this.courses = this.courses.filter(course => course.id !== id) : alert(\"Error deleting course\");\n      }\n    },\n    async isCourseExists(coursename) {\n      // Effettua una chiamata API per verificare se esiste già un corso con lo stesso nome\n      const res = await fetch(`http://localhost:5000/courses?coursename=${coursename}`);\n      const data = await res.json();\n      return data.length > 0; // Restituisce true se esiste già un corso con lo stesso nome, altrimenti false\n    },\n\n    async EditCourseForm(id, newCourse) {\n      const courseToEdit = await this.fetchCourse(id);\n\n      // Verifica se esiste già un corso con lo stesso nome\n      const isCourseExisting = await this.isCourseExists(course.coursename);\n      if (isCourseExisting) {\n        alert('Esiste già un corso con lo stesso nome.');\n        return;\n      }\n      const upCourse = {\n        id: courseToEdit.id,\n        ...newCourse\n      };\n      const res = await fetch(`http://localhost:5000/courses/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(upCourse)\n      });\n      const data = await res.json();\n\n      // Aggiorna la lista degli insegnanti con il nuovo dato ricevuto dal server\n      this.courses = this.courses.map(course => course.id === id ? {\n        ...course,\n        ...data\n      } : course);\n      this.showEditCourseForm = !this.showEditCourseForm;\n    },\n    async createCourse(course) {\n      // Verifica se esiste già un corso con lo stesso nome\n      const isCourseExisting = await this.isCourseExists(course.coursename);\n      if (isCourseExisting) {\n        alert('Esiste già un corso con lo stesso nome.');\n        return;\n      }\n      const res = await fetch(\"http://localhost:5000/courses\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(course)\n      });\n      const data = await res.json();\n      this.courses = [...this.courses, data];\n      this.showCreateCourse = !this.showCreateCourse;\n    },\n    // toggle del form create course\n    toggleCreateCourse() {\n      this.showCreateCourse = !this.showCreateCourse;\n    },\n    toggleEditCourseForm(course) {\n      this.editingCourse = course;\n      this.showEditCourseForm = !this.showEditCourseForm;\n    }\n  }\n};","map":{"version":3,"names":["AddCourseForm","CoursesContainer","EditCourseForm","name","components","data","courses","showCreateCourse","showEditCourseForm","editingCourse","created","fetchCourses","methods","res","fetch","json","fetchCourse","id","deleteCourse","confirm","method","status","filter","course","alert","isCourseExists","coursename","length","newCourse","courseToEdit","isCourseExisting","upCourse","headers","body","JSON","stringify","map","createCourse","toggleCreateCourse","toggleEditCourseForm"],"sources":["C:\\Users\\SimonePiscozzo\\vue-exercise\\src\\views\\CoursesView.vue"],"sourcesContent":["<template>\r\n    <CoursesContainer @toggle-create-course=\"toggleCreateCourse\" @edit-course=\"EditCourseForm\" @delete-course=\"deleteCourse\" :courses=\"courses\" @toggle-edit-course=\"toggleEditCourseForm\" />\r\n      <div class=\"form-container\" v-show=\"showCreateCourse\">\r\n        <AddCourseForm @create-course=\"createCourse\" @toggle-create-course=\"toggleCreateCourse\"/>\r\n      </div>\r\n      <div class=\"form-container\" v-show=\"showEditCourseForm\">\r\n        <EditCourseForm @edit-course=\"EditCourseForm\" @toggle-edit-course=\"toggleEditCourseForm\" :course=\"editingCourse\" />\r\n      </div>\r\n</template>\r\n\r\n<script>\r\n\r\n    import AddCourseForm from \"../components/AddCourseForm\"\r\n    import CoursesContainer from \"../components/CoursesContainer\"\r\n    import EditCourseForm from \"../components/EditCourseForm\"\r\n    export default {\r\n        name: \"CoursesView\",\r\n\r\n        components: {\r\n        AddCourseForm,\r\n        CoursesContainer,\r\n        EditCourseForm,\r\n        },\r\n        data() {\r\n        return {\r\n            courses: [],\r\n            showCreateCourse: false,\r\n            showEditCourseForm: false,\r\n            editingCourse: null\r\n        }\r\n        },\r\n        async created() {\r\n            this.courses = await this.fetchCourses();\r\n        },\r\n        methods: {\r\n        // fetch dei dati nel file db.json dell'array teachers\r\n        async fetchCourses() {\r\n            const res = await fetch(\"http://localhost:5000/courses\")\r\n\r\n            const data = await res.json()\r\n\r\n            return data;\r\n        },\r\n        async fetchCourse(id) {\r\n            const res = await fetch(`http://localhost:5000/courses/${id}`)\r\n\r\n            const data = await res.json()\r\n\r\n            return data\r\n        },\r\n        async deleteCourse(id) {\r\n            // console.log('task', id);\r\n            if(confirm('Are you sure?')) {\r\n                    \r\n            const res = await fetch(`http://localhost:5000/courses/${id}`, {\r\n                method: \"DELETE\",\r\n            })\r\n\r\n            res.status === 200 ? (this.courses = this.courses.filter((course) => course.id !== id)) : alert(\"Error deleting course\")\r\n            }\r\n        },\r\n\r\n        async isCourseExists(coursename) {\r\n            // Effettua una chiamata API per verificare se esiste già un corso con lo stesso nome\r\n            const res = await fetch(`http://localhost:5000/courses?coursename=${coursename}`);\r\n            const data = await res.json();\r\n\r\n            return data.length > 0; // Restituisce true se esiste già un corso con lo stesso nome, altrimenti false\r\n        },\r\n\r\n        async EditCourseForm(id, newCourse) {\r\n            const courseToEdit = await this.fetchCourse(id);\r\n\r\n            // Verifica se esiste già un corso con lo stesso nome\r\n            const isCourseExisting = await this.isCourseExists(course.coursename);\r\n            if (isCourseExisting) {\r\n                alert('Esiste già un corso con lo stesso nome.');\r\n                return;\r\n            }\r\n\r\n            const upCourse = {\r\n            id: courseToEdit.id,\r\n            ...newCourse,\r\n            };\r\n\r\n            const res = await fetch(`http://localhost:5000/courses/${id}`, {\r\n            method: \"PUT\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(upCourse),\r\n            });\r\n\r\n            const data = await res.json();\r\n\r\n            // Aggiorna la lista degli insegnanti con il nuovo dato ricevuto dal server\r\n            this.courses = this.courses.map((course) =>\r\n            course.id === id ? { ...course, ...data } : course\r\n            );\r\n\r\n            this.showEditCourseForm = !this.showEditCourseForm\r\n        },\r\n\r\n        async createCourse(course) {\r\n            // Verifica se esiste già un corso con lo stesso nome\r\n            const isCourseExisting = await this.isCourseExists(course.coursename);\r\n            if (isCourseExisting) {\r\n                alert('Esiste già un corso con lo stesso nome.');\r\n                return;\r\n            }\r\n\r\n            const res = await fetch(\"http://localhost:5000/courses\", {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify(course),\r\n            });\r\n\r\n            const data = await res.json();\r\n\r\n            this.courses = [...this.courses, data];\r\n            this.showCreateCourse = !this.showCreateCourse;\r\n        },\r\n        \r\n        // toggle del form create course\r\n        toggleCreateCourse() {\r\n            this.showCreateCourse = !this.showCreateCourse\r\n        },\r\n\r\n        toggleEditCourseForm(course) {\r\n            this.editingCourse = course;\r\n            this.showEditCourseForm = !this.showEditCourseForm\r\n        },\r\n\r\n        }\r\n    }\r\n</script>\r\n<style>\r\n  @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400&display=swap');\r\n    \r\n  * {\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding: 0;\r\n    /* outline: 1px orange solid */\r\n  }\r\n\r\n  body {\r\n    font-family: 'Poppins', sans-serif;\r\n  }\r\n\r\n  .container {\r\n    width: 100%;\r\n    height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n\r\n  .content-container {\r\n    width: 100%;\r\n    height: auto;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n\r\n  .form-container {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100vh;\r\n    top:0;\r\n    display: flex;\r\n    flex-direction: column;\r\n    row-gap: 50px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background-color: rgba(0,0,0,0.3);\r\n    backdrop-filter: blur(2px);\r\n  }\r\n\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}