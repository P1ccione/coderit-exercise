{"ast":null,"code":"import AddCourseForm from \"../components/AddCourseForm\";\nimport CoursesContainer from \"../components/CoursesContainer\";\nimport EditCourseForm from \"../components/EditCourseForm\";\nexport default {\n  name: \"CoursesView\",\n  components: {\n    AddCourseForm,\n    CoursesContainer,\n    EditCourseForm\n  },\n  data() {\n    return {\n      courses: [],\n      showCreateCourse: false\n      // showEditTeacherForm: false,\n      // editingTeacher: null\n    };\n  },\n\n  async created() {\n    this.courses = await this.fetchCourses();\n  },\n  methods: {\n    // fetch dei dati nel file db.json dell'array teachers\n    async fetchCourses() {\n      const res = await fetch(\"http://localhost:5000/courses\");\n      const data = await res.json();\n      return data;\n    },\n    async fetchCourse(id) {\n      const res = await fetch(`http://localhost:5000/courses/${id}`);\n      const data = await res.json();\n      return data;\n    },\n    async deleteCourse(id) {\n      // console.log('task', id);\n      if (confirm('Are you sure?')) {\n        const res = await fetch(`http://localhost:5000/courses/${id}`, {\n          method: \"DELETE\"\n        });\n        res.status === 200 ? this.courses = this.courses.filter(course => course.id !== id) : alert(\"Error deleting course\");\n      }\n    },\n    async isCourseExists(coursename) {\n      // Effettua una chiamata API per verificare se esiste già un corso con lo stesso nome\n      const res = await fetch(`http://localhost:5000/courses?coursename=${coursename}`);\n      const data = await res.json();\n      return data.length > 0; // Restituisce true se esiste già un corso con lo stesso nome, altrimenti false\n    },\n\n    // async EditTeacherForm(id, newTeacher) {\n    //     const teacherToEdit = await this.fetchTeacher(id);\n\n    //     // Verifica se esiste già un insegnante con la stessa email\n    //     const isEmailExisting = await this.isEmailExists(newTeacher.email);\n    //     if (isEmailExisting && newTeacher.email !== teacherToEdit.email) {\n    //     alert('Esiste già un insegnante con la stessa email.');\n    //     return;\n    //     }\n\n    //     // Verifica se esiste già un insegnante con lo stesso numero di telefono\n    //     const isPhoneExisting = await this.isPhoneExists(newTeacher.phonenumber);\n    //     if (isPhoneExisting && newTeacher.phonenumber !== teacherToEdit.phonenumber) {\n    //     alert('Esiste già un insegnante con lo stesso numero di telefono.');\n    //     return;\n    //     }\n\n    //     const upTeacher = {\n    //     id: teacherToEdit.id,\n    //     ...newTeacher,\n    //     };\n\n    //     const res = await fetch(`http://localhost:5000/teachers/${id}`, {\n    //     method: \"PUT\",\n    //     headers: {\n    //         \"Content-Type\": \"application/json\",\n    //     },\n    //     body: JSON.stringify(upTeacher),\n    //     });\n\n    //     const data = await res.json();\n\n    //     // Aggiorna la lista degli insegnanti con il nuovo dato ricevuto dal server\n    //     this.teachers = this.teachers.map((teacher) =>\n    //     teacher.id === id ? { ...teacher, ...data } : teacher\n    //     );\n\n    //     this.showEditTeacherForm = !this.showEditTeacherForm;\n    // },\n\n    async createCourse(course) {\n      // Verifica se esiste già un corso con lo stesso nome\n      const isCourseExisting = await this.isCourseExists(course.coursename);\n      if (isCourseExisting) {\n        alert('Esiste già un corso con lo stesso nome.');\n        return;\n      }\n      const res = await fetch(\"http://localhost:5000/courses\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(course)\n      });\n      const data = await res.json();\n      this.courses = [...this.courses, data];\n      this.showCreateCourse = !this.showCreateCourse;\n    },\n    // toggle del form create course\n    toggleCreateCourse() {\n      this.showCreateCourse = !this.showCreateCourse;\n    }\n\n    // toggleEditTeacherForm(teacher) {\n    //     this.editingTeacher = teacher;\n    //     this.showEditTeacherForm = !this.showEditTeacherForm\n    // },\n  }\n};","map":{"version":3,"names":["AddCourseForm","CoursesContainer","EditCourseForm","name","components","data","courses","showCreateCourse","created","fetchCourses","methods","res","fetch","json","fetchCourse","id","deleteCourse","confirm","method","status","filter","course","alert","isCourseExists","coursename","length","createCourse","isCourseExisting","headers","body","JSON","stringify","toggleCreateCourse"],"sources":["C:\\Users\\SimonePiscozzo\\vue-exercise\\src\\views\\CoursesView.vue"],"sourcesContent":["<template>\r\n    <CoursesContainer @toggle-create-course=\"toggleCreateCourse\" @edit-course=\"EditCourseForm\" @delete-course=\"deleteCourse\" :courses=\"courses\" @toggle-edit-course=\"toggleEditCourseForm\" />\r\n      <div class=\"form-container\" v-show=\"showCreateCourse\">\r\n        <AddCourseForm @create-course=\"createCourse\" @toggle-create-course=\"toggleCreateCourse\"/>\r\n      </div>\r\n      <div class=\"form-container\" v-show=\"showEditTeacherForm\">\r\n        <EditCourseForm @edit-teacher=\"EditTeacherForm\" @toggle-edit-teacher=\"toggleEditTeacherForm\" :teacher=\"editingTeacher\" />\r\n      </div>\r\n</template>\r\n\r\n<script>\r\n\r\n    import AddCourseForm from \"../components/AddCourseForm\"\r\n    import CoursesContainer from \"../components/CoursesContainer\"\r\n    import EditCourseForm from \"../components/EditCourseForm\"\r\n    export default {\r\n        name: \"CoursesView\",\r\n\r\n        components: {\r\n        AddCourseForm,\r\n        CoursesContainer,\r\n        EditCourseForm,\r\n        },\r\n        data() {\r\n        return {\r\n            courses: [],\r\n            showCreateCourse: false,\r\n            // showEditTeacherForm: false,\r\n            // editingTeacher: null\r\n        }\r\n        },\r\n        async created() {\r\n            this.courses = await this.fetchCourses();\r\n        },\r\n        methods: {\r\n        // fetch dei dati nel file db.json dell'array teachers\r\n        async fetchCourses() {\r\n            const res = await fetch(\"http://localhost:5000/courses\")\r\n\r\n            const data = await res.json()\r\n\r\n            return data;\r\n        },\r\n        async fetchCourse(id) {\r\n            const res = await fetch(`http://localhost:5000/courses/${id}`)\r\n\r\n            const data = await res.json()\r\n\r\n            return data\r\n        },\r\n        async deleteCourse(id) {\r\n            // console.log('task', id);\r\n            if(confirm('Are you sure?')) {\r\n                    \r\n            const res = await fetch(`http://localhost:5000/courses/${id}`, {\r\n                method: \"DELETE\",\r\n            })\r\n\r\n            res.status === 200 ? (this.courses = this.courses.filter((course) => course.id !== id)) : alert(\"Error deleting course\")\r\n            }\r\n        },\r\n\r\n        async isCourseExists(coursename) {\r\n            // Effettua una chiamata API per verificare se esiste già un corso con lo stesso nome\r\n            const res = await fetch(`http://localhost:5000/courses?coursename=${coursename}`);\r\n            const data = await res.json();\r\n\r\n            return data.length > 0; // Restituisce true se esiste già un corso con lo stesso nome, altrimenti false\r\n        },\r\n\r\n        // async EditTeacherForm(id, newTeacher) {\r\n        //     const teacherToEdit = await this.fetchTeacher(id);\r\n\r\n        //     // Verifica se esiste già un insegnante con la stessa email\r\n        //     const isEmailExisting = await this.isEmailExists(newTeacher.email);\r\n        //     if (isEmailExisting && newTeacher.email !== teacherToEdit.email) {\r\n        //     alert('Esiste già un insegnante con la stessa email.');\r\n        //     return;\r\n        //     }\r\n\r\n        //     // Verifica se esiste già un insegnante con lo stesso numero di telefono\r\n        //     const isPhoneExisting = await this.isPhoneExists(newTeacher.phonenumber);\r\n        //     if (isPhoneExisting && newTeacher.phonenumber !== teacherToEdit.phonenumber) {\r\n        //     alert('Esiste già un insegnante con lo stesso numero di telefono.');\r\n        //     return;\r\n        //     }\r\n\r\n        //     const upTeacher = {\r\n        //     id: teacherToEdit.id,\r\n        //     ...newTeacher,\r\n        //     };\r\n\r\n        //     const res = await fetch(`http://localhost:5000/teachers/${id}`, {\r\n        //     method: \"PUT\",\r\n        //     headers: {\r\n        //         \"Content-Type\": \"application/json\",\r\n        //     },\r\n        //     body: JSON.stringify(upTeacher),\r\n        //     });\r\n\r\n        //     const data = await res.json();\r\n\r\n        //     // Aggiorna la lista degli insegnanti con il nuovo dato ricevuto dal server\r\n        //     this.teachers = this.teachers.map((teacher) =>\r\n        //     teacher.id === id ? { ...teacher, ...data } : teacher\r\n        //     );\r\n\r\n        //     this.showEditTeacherForm = !this.showEditTeacherForm;\r\n        // },\r\n\r\n        async createCourse(course) {\r\n            // Verifica se esiste già un corso con lo stesso nome\r\n            const isCourseExisting = await this.isCourseExists(course.coursename);\r\n            if (isCourseExisting) {\r\n                alert('Esiste già un corso con lo stesso nome.');\r\n                return;\r\n            }\r\n\r\n            const res = await fetch(\"http://localhost:5000/courses\", {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify(course),\r\n            });\r\n\r\n            const data = await res.json();\r\n\r\n            this.courses = [...this.courses, data];\r\n            this.showCreateCourse = !this.showCreateCourse;\r\n        },\r\n        \r\n        // toggle del form create course\r\n        toggleCreateCourse() {\r\n            this.showCreateCourse = !this.showCreateCourse\r\n        },\r\n\r\n        // toggleEditTeacherForm(teacher) {\r\n        //     this.editingTeacher = teacher;\r\n        //     this.showEditTeacherForm = !this.showEditTeacherForm\r\n        // },\r\n\r\n        }\r\n    }\r\n</script>\r\n<style>\r\n  @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400&display=swap');\r\n    \r\n  * {\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding: 0;\r\n    /* outline: 1px orange solid */\r\n  }\r\n\r\n  body {\r\n    font-family: 'Poppins', sans-serif;\r\n  }\r\n\r\n  .container {\r\n    width: 100%;\r\n    height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n\r\n  .content-container {\r\n    width: 100%;\r\n    height: auto;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n\r\n  .form-container {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100vh;\r\n    top:0;\r\n    display: flex;\r\n    flex-direction: column;\r\n    row-gap: 50px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background-color: rgba(0,0,0,0.3);\r\n    backdrop-filter: blur(2px);\r\n  }\r\n\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}