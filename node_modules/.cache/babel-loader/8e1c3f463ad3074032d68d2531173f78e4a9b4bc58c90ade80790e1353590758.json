{"ast":null,"code":"// import AddTeacherForm from \"../components/AddTeacherForm\"\nimport CoursesContainer from \"../components/CoursesContainer\";\n// import EditTeacherForm from \"../components/EditTeacherForm\"\nexport default {\n  name: \"CoursesView\",\n  components: {\n    // AddTeacherForm,\n    CoursesContainer\n    // EditTeacherForm,\n  },\n\n  data() {\n    return {\n      courses: []\n      // showCreateTeacher: false,\n      // showEditTeacherForm: false,\n      // editingTeacher: null\n    };\n  },\n\n  async created() {\n    this.courses = await this.fetchCourses();\n  },\n  methods: {\n    // fetch dei dati nel file db.json dell'array teachers\n    async fetchCourses() {\n      const res = await fetch(\"http://localhost:5000/courses\");\n      const data = await res.json();\n      return data;\n    },\n    async fetchCourse(id) {\n      const res = await fetch(`http://localhost:5000/courses/${id}`);\n      const data = await res.json();\n      return data;\n    }\n    // async deleteTeacher(id) {\n    //     // console.log('task', id);\n    //     if(confirm('Are you sure?')) {\n\n    //     const res = await fetch(`http://localhost:5000/teachers/${id}`, {\n    //         method: \"DELETE\",\n    //     })\n\n    //     res.status === 200 ? (this.teachers = this.teachers.filter((teacher) => teacher.id !== id)) : alert(\"Error deleting teacher\")\n    //     }\n    // },\n\n    // async isEmailExists(email) {\n    //     // Effettua una chiamata API per verificare se esiste già un insegnante con la stessa email\n    //     const res = await fetch(`http://localhost:5000/teachers?email=${email}`);\n    //     const data = await res.json();\n\n    //     return data.length > 0; // Restituisce true se esiste già un insegnante con la stessa email, altrimenti false\n    // },\n\n    // async isPhoneExists(phonenumber) {\n    //     // Effettua una chiamata API per verificare se esiste già un insegnante con lo stesso numero di telefono\n    //     const res = await fetch(`http://localhost:5000/teachers?phonenumber=${phonenumber}`);\n    //     const data = await res.json();\n\n    //     return data.length > 0; // Restituisce true se esiste già un insegnante con lo stesso numero di telefono, altrimenti false\n    // },\n\n    // async EditTeacherForm(id, newTeacher) {\n    //     const teacherToEdit = await this.fetchTeacher(id);\n\n    //     // Verifica se esiste già un insegnante con la stessa email\n    //     const isEmailExisting = await this.isEmailExists(newTeacher.email);\n    //     if (isEmailExisting && newTeacher.email !== teacherToEdit.email) {\n    //     alert('Esiste già un insegnante con la stessa email.');\n    //     return;\n    //     }\n\n    //     // Verifica se esiste già un insegnante con lo stesso numero di telefono\n    //     const isPhoneExisting = await this.isPhoneExists(newTeacher.phonenumber);\n    //     if (isPhoneExisting && newTeacher.phonenumber !== teacherToEdit.phonenumber) {\n    //     alert('Esiste già un insegnante con lo stesso numero di telefono.');\n    //     return;\n    //     }\n\n    //     const upTeacher = {\n    //     id: teacherToEdit.id,\n    //     ...newTeacher,\n    //     };\n\n    //     const res = await fetch(`http://localhost:5000/teachers/${id}`, {\n    //     method: \"PUT\",\n    //     headers: {\n    //         \"Content-Type\": \"application/json\",\n    //     },\n    //     body: JSON.stringify(upTeacher),\n    //     });\n\n    //     const data = await res.json();\n\n    //     // Aggiorna la lista degli insegnanti con il nuovo dato ricevuto dal server\n    //     this.teachers = this.teachers.map((teacher) =>\n    //     teacher.id === id ? { ...teacher, ...data } : teacher\n    //     );\n\n    //     this.showEditTeacherForm = !this.showEditTeacherForm;\n    // },\n\n    // async createTeacher(teacher) {\n    //     // Verifica se esiste già un insegnante con la stessa email\n    //     const isEmailExisting = await this.isEmailExists(teacher.email);\n    //     if (isEmailExisting) {\n    //     alert('Esiste già un insegnante con la stessa email.');\n    //     return;\n    //     }\n\n    //     // Verifica se esiste già un insegnante con lo stesso numero di telefono\n    //     const isPhoneExisting = await this.isPhoneExists(teacher.phonenumber);\n    //     if (isPhoneExisting) {\n    //     alert('Esiste già un insegnante con lo stesso numero di telefono.');\n    //     return;\n    //     }\n\n    //     const res = await fetch(\"http://localhost:5000/teachers\", {\n    //     method: \"POST\",\n    //     headers: { \"Content-Type\": \"application/json\" },\n    //     body: JSON.stringify(teacher),\n    //     });\n\n    //     const data = await res.json();\n\n    //     this.teachers = [...this.teachers, data];\n    //     this.showForm = !this.showForm;\n    //     this.showCreateTeacher = !this.showCreateTeacher;\n    // },\n\n    // // toggle del form create teacher\n    // toggleCreateTeacher() {\n    //     this.showCreateTeacher = !this.showCreateTeacher\n    // },\n\n    // toggleEditTeacherForm(teacher) {\n    //     this.editingTeacher = teacher;\n    //     this.showEditTeacherForm = !this.showEditTeacherForm\n    // },\n\n    // toggleTeachersContainer() {\n    //     console.log(this.showTeachersContainer);\n    //     if(!this.showTeachersContainer){\n    //     this.showTeachersContainer = !this.showTeachersContainer\n    //     }\n    // },\n  }\n};","map":{"version":3,"names":["CoursesContainer","name","components","data","courses","created","fetchCourses","methods","res","fetch","json","fetchCourse","id"],"sources":["C:\\Users\\SimonePiscozzo\\vue-exercise\\src\\views\\CoursesView.vue"],"sourcesContent":["<template>\r\n    <CoursesContainer @toggle-create-course=\"toggleCreateCourse\" @edit-course=\"EditCourseForm\" @delete-course=\"deleteCourse\" :courses=\"courses\" @toggle-edit-course=\"toggleEditCourseForm\" />\r\n      <div class=\"form-container\" v-show=\"showCreateTeacher\">\r\n        <!-- <AddTeacherForm @create-teacher=\"createTeacher\" @toggle-create-teacher=\"toggleCreateTeacher\"/> -->\r\n      </div>\r\n      <div class=\"form-container\" v-show=\"showEditTeacherForm\">\r\n        <!-- <EditTeacherForm @edit-teacher=\"EditTeacherForm\" @toggle-edit-teacher=\"toggleEditTeacherForm\" :teacher=\"editingTeacher\" /> -->\r\n      </div>\r\n</template>\r\n\r\n<script>\r\n\r\n    // import AddTeacherForm from \"../components/AddTeacherForm\"\r\n    import CoursesContainer from \"../components/CoursesContainer\"\r\n    // import EditTeacherForm from \"../components/EditTeacherForm\"\r\n    export default {\r\n        name: \"CoursesView\",\r\n\r\n        components: {\r\n        // AddTeacherForm,\r\n        CoursesContainer,\r\n        // EditTeacherForm,\r\n        },\r\n        data() {\r\n        return {\r\n            courses: [],\r\n            // showCreateTeacher: false,\r\n            // showEditTeacherForm: false,\r\n            // editingTeacher: null\r\n        }\r\n        },\r\n        async created() {\r\n            this.courses = await this.fetchCourses();\r\n        },\r\n        methods: {\r\n        // fetch dei dati nel file db.json dell'array teachers\r\n        async fetchCourses() {\r\n            const res = await fetch(\"http://localhost:5000/courses\")\r\n\r\n            const data = await res.json()\r\n\r\n            return data;\r\n        },\r\n        async fetchCourse(id) {\r\n            const res = await fetch(`http://localhost:5000/courses/${id}`)\r\n\r\n            const data = await res.json()\r\n\r\n            return data\r\n        },\r\n        // async deleteTeacher(id) {\r\n        //     // console.log('task', id);\r\n        //     if(confirm('Are you sure?')) {\r\n                    \r\n        //     const res = await fetch(`http://localhost:5000/teachers/${id}`, {\r\n        //         method: \"DELETE\",\r\n        //     })\r\n\r\n        //     res.status === 200 ? (this.teachers = this.teachers.filter((teacher) => teacher.id !== id)) : alert(\"Error deleting teacher\")\r\n        //     }\r\n        // },\r\n\r\n        // async isEmailExists(email) {\r\n        //     // Effettua una chiamata API per verificare se esiste già un insegnante con la stessa email\r\n        //     const res = await fetch(`http://localhost:5000/teachers?email=${email}`);\r\n        //     const data = await res.json();\r\n\r\n        //     return data.length > 0; // Restituisce true se esiste già un insegnante con la stessa email, altrimenti false\r\n        // },\r\n\r\n        // async isPhoneExists(phonenumber) {\r\n        //     // Effettua una chiamata API per verificare se esiste già un insegnante con lo stesso numero di telefono\r\n        //     const res = await fetch(`http://localhost:5000/teachers?phonenumber=${phonenumber}`);\r\n        //     const data = await res.json();\r\n\r\n        //     return data.length > 0; // Restituisce true se esiste già un insegnante con lo stesso numero di telefono, altrimenti false\r\n        // },\r\n\r\n        // async EditTeacherForm(id, newTeacher) {\r\n        //     const teacherToEdit = await this.fetchTeacher(id);\r\n\r\n        //     // Verifica se esiste già un insegnante con la stessa email\r\n        //     const isEmailExisting = await this.isEmailExists(newTeacher.email);\r\n        //     if (isEmailExisting && newTeacher.email !== teacherToEdit.email) {\r\n        //     alert('Esiste già un insegnante con la stessa email.');\r\n        //     return;\r\n        //     }\r\n\r\n        //     // Verifica se esiste già un insegnante con lo stesso numero di telefono\r\n        //     const isPhoneExisting = await this.isPhoneExists(newTeacher.phonenumber);\r\n        //     if (isPhoneExisting && newTeacher.phonenumber !== teacherToEdit.phonenumber) {\r\n        //     alert('Esiste già un insegnante con lo stesso numero di telefono.');\r\n        //     return;\r\n        //     }\r\n\r\n        //     const upTeacher = {\r\n        //     id: teacherToEdit.id,\r\n        //     ...newTeacher,\r\n        //     };\r\n\r\n        //     const res = await fetch(`http://localhost:5000/teachers/${id}`, {\r\n        //     method: \"PUT\",\r\n        //     headers: {\r\n        //         \"Content-Type\": \"application/json\",\r\n        //     },\r\n        //     body: JSON.stringify(upTeacher),\r\n        //     });\r\n\r\n        //     const data = await res.json();\r\n\r\n        //     // Aggiorna la lista degli insegnanti con il nuovo dato ricevuto dal server\r\n        //     this.teachers = this.teachers.map((teacher) =>\r\n        //     teacher.id === id ? { ...teacher, ...data } : teacher\r\n        //     );\r\n\r\n        //     this.showEditTeacherForm = !this.showEditTeacherForm;\r\n        // },\r\n\r\n        // async createTeacher(teacher) {\r\n        //     // Verifica se esiste già un insegnante con la stessa email\r\n        //     const isEmailExisting = await this.isEmailExists(teacher.email);\r\n        //     if (isEmailExisting) {\r\n        //     alert('Esiste già un insegnante con la stessa email.');\r\n        //     return;\r\n        //     }\r\n\r\n        //     // Verifica se esiste già un insegnante con lo stesso numero di telefono\r\n        //     const isPhoneExisting = await this.isPhoneExists(teacher.phonenumber);\r\n        //     if (isPhoneExisting) {\r\n        //     alert('Esiste già un insegnante con lo stesso numero di telefono.');\r\n        //     return;\r\n        //     }\r\n\r\n        //     const res = await fetch(\"http://localhost:5000/teachers\", {\r\n        //     method: \"POST\",\r\n        //     headers: { \"Content-Type\": \"application/json\" },\r\n        //     body: JSON.stringify(teacher),\r\n        //     });\r\n\r\n        //     const data = await res.json();\r\n\r\n        //     this.teachers = [...this.teachers, data];\r\n        //     this.showForm = !this.showForm;\r\n        //     this.showCreateTeacher = !this.showCreateTeacher;\r\n        // },\r\n        \r\n        // // toggle del form create teacher\r\n        // toggleCreateTeacher() {\r\n        //     this.showCreateTeacher = !this.showCreateTeacher\r\n        // },\r\n\r\n        // toggleEditTeacherForm(teacher) {\r\n        //     this.editingTeacher = teacher;\r\n        //     this.showEditTeacherForm = !this.showEditTeacherForm\r\n        // },\r\n\r\n        // toggleTeachersContainer() {\r\n        //     console.log(this.showTeachersContainer);\r\n        //     if(!this.showTeachersContainer){\r\n        //     this.showTeachersContainer = !this.showTeachersContainer\r\n        //     }\r\n        // },\r\n\r\n        }\r\n    }\r\n</script>\r\n<style>\r\n  @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400&display=swap');\r\n    \r\n  * {\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding: 0;\r\n    /* outline: 1px orange solid */\r\n  }\r\n\r\n  body {\r\n    font-family: 'Poppins', sans-serif;\r\n  }\r\n\r\n  .container {\r\n    width: 100%;\r\n    height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n\r\n  .content-container {\r\n    width: 100%;\r\n    height: auto;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n\r\n  .form-container {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100vh;\r\n    top:0;\r\n    display: flex;\r\n    flex-direction: column;\r\n    row-gap: 50px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background-color: rgba(0,0,0,0.3);\r\n    backdrop-filter: blur(2px);\r\n  }\r\n\r\n</style>\r\n"],"mappings":"AAYI;AACA,OAAOA,gBAAe,MAAO,gCAA+B;AAC5D;AACA,eAAe;EACXC,IAAI,EAAE,aAAa;EAEnBC,UAAU,EAAE;IACZ;IACAF;IACA;EACA,CAAC;;EACDG,IAAIA,CAAA,EAAG;IACP,OAAO;MACHC,OAAO,EAAE;MACT;MACA;MACA;IACJ;EACA,CAAC;;EACD,MAAMC,OAAOA,CAAA,EAAG;IACZ,IAAI,CAACD,OAAM,GAAI,MAAM,IAAI,CAACE,YAAY,CAAC,CAAC;EAC5C,CAAC;EACDC,OAAO,EAAE;IACT;IACA,MAAMD,YAAYA,CAAA,EAAG;MACjB,MAAME,GAAE,GAAI,MAAMC,KAAK,CAAC,+BAA+B;MAEvD,MAAMN,IAAG,GAAI,MAAMK,GAAG,CAACE,IAAI,CAAC;MAE5B,OAAOP,IAAI;IACf,CAAC;IACD,MAAMQ,WAAWA,CAACC,EAAE,EAAE;MAClB,MAAMJ,GAAE,GAAI,MAAMC,KAAK,CAAE,iCAAgCG,EAAG,EAAC;MAE7D,MAAMT,IAAG,GAAI,MAAMK,GAAG,CAACE,IAAI,CAAC;MAE5B,OAAOP,IAAG;IACd;IACA;IACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;;IAEA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;EAEA;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}