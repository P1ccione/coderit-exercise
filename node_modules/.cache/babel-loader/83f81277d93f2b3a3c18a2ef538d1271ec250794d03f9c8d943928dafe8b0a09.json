{"ast":null,"code":"import AddTeacherForm from \"../components/AddTeacherForm\";\nimport CoursesContainer from \"../components/TeachersContainer\";\nimport EditTeacherForm from \"../components/EditTeacherForm\";\nexport default {\n  name: \"CoursesView\",\n  components: {\n    AddTeacherForm,\n    CoursesContainer,\n    EditTeacherForm\n  },\n  data() {\n    return {\n      teachers: [],\n      showCreateTeacher: false,\n      showEditTeacherForm: false,\n      showTeachersContainer: true,\n      editingTeacher: null\n    };\n  },\n  async created() {\n    this.teachers = await this.fetchTeachers();\n  },\n  methods: {\n    // fetch dei dati nel file db.json dell'array teachers\n    async fetchTeachers() {\n      const res = await fetch(\"http://localhost:5000/teachers\");\n      const data = await res.json();\n      return data;\n    },\n    async fetchTeacher(id) {\n      const res = await fetch(`http://localhost:5000/teachers/${id}`);\n      const data = await res.json();\n      return data;\n    },\n    async deleteTeacher(id) {\n      // console.log('task', id);\n      if (confirm('Are you sure?')) {\n        const res = await fetch(`http://localhost:5000/teachers/${id}`, {\n          method: \"DELETE\"\n        });\n        res.status === 200 ? this.teachers = this.teachers.filter(teacher => teacher.id !== id) : alert(\"Error deleting teacher\");\n      }\n    },\n    async isEmailExists(email) {\n      // Effettua una chiamata API per verificare se esiste già un insegnante con la stessa email\n      const res = await fetch(`http://localhost:5000/teachers?email=${email}`);\n      const data = await res.json();\n      return data.length > 0; // Restituisce true se esiste già un insegnante con la stessa email, altrimenti false\n    },\n\n    async isPhoneExists(phonenumber) {\n      // Effettua una chiamata API per verificare se esiste già un insegnante con lo stesso numero di telefono\n      const res = await fetch(`http://localhost:5000/teachers?phonenumber=${phonenumber}`);\n      const data = await res.json();\n      return data.length > 0; // Restituisce true se esiste già un insegnante con lo stesso numero di telefono, altrimenti false\n    },\n\n    async EditTeacherForm(id, newTeacher) {\n      const teacherToEdit = await this.fetchTeacher(id);\n\n      // Verifica se esiste già un insegnante con la stessa email\n      const isEmailExisting = await this.isEmailExists(newTeacher.email);\n      if (isEmailExisting && newTeacher.email !== teacherToEdit.email) {\n        alert('Esiste già un insegnante con la stessa email.');\n        return;\n      }\n\n      // Verifica se esiste già un insegnante con lo stesso numero di telefono\n      const isPhoneExisting = await this.isPhoneExists(newTeacher.phonenumber);\n      if (isPhoneExisting && newTeacher.phonenumber !== teacherToEdit.phonenumber) {\n        alert('Esiste già un insegnante con lo stesso numero di telefono.');\n        return;\n      }\n      const upTeacher = {\n        id: teacherToEdit.id,\n        ...newTeacher\n      };\n      const res = await fetch(`http://localhost:5000/teachers/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(upTeacher)\n      });\n      const data = await res.json();\n\n      // Aggiorna la lista degli insegnanti con il nuovo dato ricevuto dal server\n      this.teachers = this.teachers.map(teacher => teacher.id === id ? {\n        ...teacher,\n        ...data\n      } : teacher);\n      this.showEditTeacherForm = !this.showEditTeacherForm;\n    },\n    async createTeacher(teacher) {\n      // Verifica se esiste già un insegnante con la stessa email\n      const isEmailExisting = await this.isEmailExists(teacher.email);\n      if (isEmailExisting) {\n        alert('Esiste già un insegnante con la stessa email.');\n        return;\n      }\n\n      // Verifica se esiste già un insegnante con lo stesso numero di telefono\n      const isPhoneExisting = await this.isPhoneExists(teacher.phonenumber);\n      if (isPhoneExisting) {\n        alert('Esiste già un insegnante con lo stesso numero di telefono.');\n        return;\n      }\n      const res = await fetch(\"http://localhost:5000/teachers\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(teacher)\n      });\n      const data = await res.json();\n      this.teachers = [...this.teachers, data];\n      this.showForm = !this.showForm;\n      this.showCreateTeacher = !this.showCreateTeacher;\n    },\n    // toggle del form create teacher\n    toggleCreateTeacher() {\n      this.showCreateTeacher = !this.showCreateTeacher;\n    },\n    toggleEditTeacherForm(teacher) {\n      this.editingTeacher = teacher;\n      this.showEditTeacherForm = !this.showEditTeacherForm;\n    },\n    toggleTeachersContainer() {\n      console.log(this.showTeachersContainer);\n      if (!this.showTeachersContainer) {\n        this.showTeachersContainer = !this.showTeachersContainer;\n      }\n    }\n  }\n};","map":{"version":3,"names":["AddTeacherForm","CoursesContainer","EditTeacherForm","name","components","data","teachers","showCreateTeacher","showEditTeacherForm","showTeachersContainer","editingTeacher","created","fetchTeachers","methods","res","fetch","json","fetchTeacher","id","deleteTeacher","confirm","method","status","filter","teacher","alert","isEmailExists","email","length","isPhoneExists","phonenumber","newTeacher","teacherToEdit","isEmailExisting","isPhoneExisting","upTeacher","headers","body","JSON","stringify","map","createTeacher","showForm","toggleCreateTeacher","toggleEditTeacherForm","toggleTeachersContainer","console","log"],"sources":["C:\\Users\\SimonePiscozzo\\vue-exercise\\src\\views\\CoursesView.vue"],"sourcesContent":["<template>\r\n    <TeachersContainer v-show=\"showTeachersContainer\" @toggle-create-teacher=\"toggleCreateTeacher\" @edit-teacher=\"EditTeacherForm\" @delete-teacher=\"deleteTeacher\" :teachers=\"teachers\" @toggle-edit-teacher=\"toggleEditTeacherForm\" />\r\n      <div class=\"form-container\" v-show=\"showCreateTeacher\">\r\n        <!-- <AddTeacherForm @create-teacher=\"createTeacher\" @toggle-create-teacher=\"toggleCreateTeacher\"/> -->\r\n      </div>\r\n      <div class=\"form-container\" v-show=\"showEditTeacherForm\">\r\n        <!-- <EditTeacherForm @edit-teacher=\"EditTeacherForm\" @toggle-edit-teacher=\"toggleEditTeacherForm\" :teacher=\"editingTeacher\" /> -->\r\n      </div>\r\n</template>\r\n\r\n<script>\r\n\r\n    import AddTeacherForm from \"../components/AddTeacherForm\"\r\n    import CoursesContainer from \"../components/TeachersContainer\"\r\n    import EditTeacherForm from \"../components/EditTeacherForm\"\r\n    export default {\r\n        name: \"CoursesView\",\r\n\r\n        components: {\r\n        AddTeacherForm,\r\n        CoursesContainer,\r\n        EditTeacherForm,\r\n        },\r\n        data() {\r\n        return {\r\n            teachers: [],\r\n            showCreateTeacher: false,\r\n            showEditTeacherForm: false,\r\n            showTeachersContainer: true,\r\n            editingTeacher: null\r\n        }\r\n        },\r\n        async created() {\r\n        this.teachers = await this.fetchTeachers();\r\n        },\r\n        methods: {\r\n        // fetch dei dati nel file db.json dell'array teachers\r\n        async fetchTeachers() {\r\n            const res = await fetch(\"http://localhost:5000/teachers\")\r\n\r\n            const data = await res.json()\r\n\r\n            return data;\r\n        },\r\n        async fetchTeacher(id) {\r\n            const res = await fetch(`http://localhost:5000/teachers/${id}`)\r\n\r\n            const data = await res.json()\r\n\r\n            return data\r\n        },\r\n        async deleteTeacher(id) {\r\n            // console.log('task', id);\r\n            if(confirm('Are you sure?')) {\r\n                    \r\n            const res = await fetch(`http://localhost:5000/teachers/${id}`, {\r\n                method: \"DELETE\",\r\n            })\r\n\r\n            res.status === 200 ? (this.teachers = this.teachers.filter((teacher) => teacher.id !== id)) : alert(\"Error deleting teacher\")\r\n            }\r\n        },\r\n\r\n        async isEmailExists(email) {\r\n            // Effettua una chiamata API per verificare se esiste già un insegnante con la stessa email\r\n            const res = await fetch(`http://localhost:5000/teachers?email=${email}`);\r\n            const data = await res.json();\r\n\r\n            return data.length > 0; // Restituisce true se esiste già un insegnante con la stessa email, altrimenti false\r\n        },\r\n\r\n        async isPhoneExists(phonenumber) {\r\n            // Effettua una chiamata API per verificare se esiste già un insegnante con lo stesso numero di telefono\r\n            const res = await fetch(`http://localhost:5000/teachers?phonenumber=${phonenumber}`);\r\n            const data = await res.json();\r\n\r\n            return data.length > 0; // Restituisce true se esiste già un insegnante con lo stesso numero di telefono, altrimenti false\r\n        },\r\n\r\n        async EditTeacherForm(id, newTeacher) {\r\n            const teacherToEdit = await this.fetchTeacher(id);\r\n\r\n            // Verifica se esiste già un insegnante con la stessa email\r\n            const isEmailExisting = await this.isEmailExists(newTeacher.email);\r\n            if (isEmailExisting && newTeacher.email !== teacherToEdit.email) {\r\n            alert('Esiste già un insegnante con la stessa email.');\r\n            return;\r\n            }\r\n\r\n            // Verifica se esiste già un insegnante con lo stesso numero di telefono\r\n            const isPhoneExisting = await this.isPhoneExists(newTeacher.phonenumber);\r\n            if (isPhoneExisting && newTeacher.phonenumber !== teacherToEdit.phonenumber) {\r\n            alert('Esiste già un insegnante con lo stesso numero di telefono.');\r\n            return;\r\n            }\r\n\r\n            const upTeacher = {\r\n            id: teacherToEdit.id,\r\n            ...newTeacher,\r\n            };\r\n\r\n            const res = await fetch(`http://localhost:5000/teachers/${id}`, {\r\n            method: \"PUT\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(upTeacher),\r\n            });\r\n\r\n            const data = await res.json();\r\n\r\n            // Aggiorna la lista degli insegnanti con il nuovo dato ricevuto dal server\r\n            this.teachers = this.teachers.map((teacher) =>\r\n            teacher.id === id ? { ...teacher, ...data } : teacher\r\n            );\r\n\r\n            this.showEditTeacherForm = !this.showEditTeacherForm;\r\n        },\r\n\r\n        async createTeacher(teacher) {\r\n            // Verifica se esiste già un insegnante con la stessa email\r\n            const isEmailExisting = await this.isEmailExists(teacher.email);\r\n            if (isEmailExisting) {\r\n            alert('Esiste già un insegnante con la stessa email.');\r\n            return;\r\n            }\r\n\r\n            // Verifica se esiste già un insegnante con lo stesso numero di telefono\r\n            const isPhoneExisting = await this.isPhoneExists(teacher.phonenumber);\r\n            if (isPhoneExisting) {\r\n            alert('Esiste già un insegnante con lo stesso numero di telefono.');\r\n            return;\r\n            }\r\n\r\n            const res = await fetch(\"http://localhost:5000/teachers\", {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify(teacher),\r\n            });\r\n\r\n            const data = await res.json();\r\n\r\n            this.teachers = [...this.teachers, data];\r\n            this.showForm = !this.showForm;\r\n            this.showCreateTeacher = !this.showCreateTeacher;\r\n        },\r\n        \r\n        // toggle del form create teacher\r\n        toggleCreateTeacher() {\r\n            this.showCreateTeacher = !this.showCreateTeacher\r\n        },\r\n\r\n        toggleEditTeacherForm(teacher) {\r\n            this.editingTeacher = teacher;\r\n            this.showEditTeacherForm = !this.showEditTeacherForm\r\n        },\r\n\r\n        toggleTeachersContainer() {\r\n            console.log(this.showTeachersContainer);\r\n            if(!this.showTeachersContainer){\r\n            this.showTeachersContainer = !this.showTeachersContainer\r\n            }\r\n        },\r\n\r\n        }\r\n    }\r\n</script>\r\n<style>\r\n  @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400&display=swap');\r\n    \r\n  * {\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding: 0;\r\n    /* outline: 1px orange solid */\r\n  }\r\n\r\n  body {\r\n    font-family: 'Poppins', sans-serif;\r\n  }\r\n\r\n  .container {\r\n    width: 100%;\r\n    height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n\r\n  .content-container {\r\n    width: 100%;\r\n    height: auto;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n\r\n  .form-container {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100vh;\r\n    top:0;\r\n    display: flex;\r\n    flex-direction: column;\r\n    row-gap: 50px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background-color: rgba(0,0,0,0.3);\r\n    backdrop-filter: blur(2px);\r\n  }\r\n\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}